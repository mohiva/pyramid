h1. Mohiva Pyramid "!http://travis-ci.org/mohiva/pyramid.png!":http://travis-ci.org/mohiva/pyramid

The Mohiva Pyramid project is an "operator precedence parser":http://en.wikipedia.org/wiki/Operator-precedence_parser based on the "Precedence climbing":http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing algorithm described by "Theodore Norvell":http://www.engr.mun.ca/~theo/.

h2. Installation

You can install the library through "composer":http://getcomposer.org.

1. Add @mohiva/pyramid@ as a dependency to your @composer.json@ file:

<pre lang="js">
{
    "require": {
        "mohiva/pyramid": "dev-master"
    }
}
</pre>

2. Download and install Composer:

<pre lang="sh">
curl -s http://getcomposer.org/installer | php
</pre>

3. Install your dependencies:

<pre lang="sh">
php composer.phar install
</pre>

4. Use Composer's autoloader

Composer comes with an autoloader for all vendor packages. You can use it if you add the following line to your bootstrap file.
<pre lang="php">
<code>
require 'vendor/autoload.php';
</code>
</pre>

For more information about composer please visit "getcomposer.org":http://getcomposer.org.

h2. Requirements

Mohiva Pyramid needs PHP 5.4 to work.

h2. How to use

The library comes with an "example":pyramid/tree/master/src/com/mohiva/pyramid/example of how to use it. This example uses a simple "grammar":pyramid/blob/master/src/com/mohiva/pyramid/example/Grammar.php. It's a very simple calculator with the following precedence table.

|\3. Unary         |
| - | Negative | 5 |
| + | Positive | 5 |

|\4. Binary                                  |
| + | Addition       | 2 | left associative  |
| - | Subtraction    | 2 | left associative  |
| * | Multiplication | 3 | left associative  |
| / | Division       | 3 | left associative  |
| % | Modulo         | 3 | left associative  |
| ^ | Exponentiation | 4 | right associative |

|\4. Ternary                                 |
| ?: | Ternary if    | 1 | right associative |

The calculator can deal with "parentheses":pyramid/blob/master/src/com/mohiva/pyramid/example/operands/ParenthesesOperand.php, "integer and floating-point values":pyramid/blob/master/src/com/mohiva/pyramid/example/operands/NumberOperand.php.

So lets talk about the steps to create your own language.
# Create your grammar and your precedence table
# Create a "Lexer":pyramid/blob/master/src/com/mohiva/pyramid/example/Lexer.php class to tokenize your input
# Create your "nodes":pyramid/tree/master/src/com/mohiva/pyramid/example/nodes and "operands":pyramid/tree/master/src/com/mohiva/pyramid/example/operands
# Parse it

<pre lang="php">
<?php

use com\mohiva\pyramid\Parser;
use com\mohiva\pyramid\example\Lexer;
use com\mohiva\pyramid\example\Grammar;

$lexer = new Lexer();
$stream = $lexer->scan('1.1 + 1.5');

$parser = new Parser(new Grammar());
$node = $parser->parse($stream);

$node->evaluate();
</pre>

h2. License

This project is Open Source and released under the terms of the New BSD License.
